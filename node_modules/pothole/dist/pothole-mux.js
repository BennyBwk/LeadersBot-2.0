'use strict';
/**
 * Pothole multiplexer
 */

// npm-installed modules

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('lodash');
var debug = require('debug')('pothole:PotholeMux');

// own modules
var Pothole = require('./pothole');

exports = module.exports = function () {
    function PotholeMux() {
        _classCallCheck(this, PotholeMux);

        this._potholes = {};
        this._start = {};
    }

    /**
     * Throws error if pothole with 'label' is not found.
     *
     * @param {String} label
     * @return {Pothole} the found pothole
     * @throws Error if pothole is missing
     */


    _createClass(PotholeMux, [{
        key: '_checkForPothole',
        value: function _checkForPothole(label) {
            var pothole = this._potholes[label];
            if (!pothole) {
                throw new Error('pothole with label \'' + label + '\' missing');
            }
            return pothole;
        }

        /**
         * Add a new pothole
         *
         * @param {String} label
         * @param {Object} options
         * @return {Pothole} the newly-added pothole
         */

    }, {
        key: 'add',
        value: function add(label, options) {
            if (this._potholes[label]) {
                throw new Error('pothole already exists');
            }
            debug(label + ': adding new pothole');
            this._potholes[label] = new Pothole(options);
            this._start[label] = 1;
            return this._potholes[label];
        }

        /**
         * Enqueue a function.
         *
         * @param {String} label
         * @param {Function} func
         * @return {this}
         */

    }, {
        key: 'enqueue',
        value: function enqueue(label, func) {
            var pothole = this._checkForPothole(label);
            if (this._start[label]) {
                debug(label + ': starting pothole');
                pothole.start();
                delete this._start[label];
            }
            debug(label + ': queueing function');
            pothole.enqueue(func);
            return this;
        }

        /**
         * Get stats on a pothole
         *
         * @param {String} label
         * @return {Object} stats
         */

    }, {
        key: 'stats',
        value: function stats(label) {
            var pothole = this._checkForPothole(label);
            return pothole.stats();
        }

        /**
         * Stop a pothole.
         *
         * @param {String} label
         * @return {Pothole} the stopped pothole
         */

    }, {
        key: 'stop',
        value: function stop(label) {
            var pothole = this._checkForPothole(label);
            debug(label + ': stopping pothole');
            return pothole.stop();
        }
    }]);

    return PotholeMux;
}();